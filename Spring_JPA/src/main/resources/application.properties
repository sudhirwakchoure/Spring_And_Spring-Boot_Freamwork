spring.application.name=Spring_JPA

#data source
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

spring.datasource.url=jdbc:mysql://localhost:3306/spring_jpa
spring.datasource.username=root
spring.datasource.password=root


#JPA and Hibernate configuration


# this is now print the queries automatically created by the hibernate
spring.jpa.show-sql=true

#  this is showing the Formated SQL queries because we use SQL database
spring.jpa.properties.hibernate.format_sql=true

# this is used to create a table automatically is automapping (it'd create schema automatically -
# - based of the mapping done in entity class)

# 1.  none - hibernate not manage
#   Hibernate does not manage the database schema.
#   You are responsible for creating and updating the schema manually.

# 2. validate: hibernate will validate the schema against your entities but not make changes
#               It does not make any changes to the schema; it simply validates that everything is consistent.
# 3. update: Hibernate will attempt to update the schema to match your entity mappings
#             It will add missing columns or tables, but it won't drop existing ones.
#            Use this option cautiously in production environments as it may lead to unintended changes.

# 4. create: *) Hibernate will drop the existing schema (if any) and recreate it from scratch based
#                    on your entity mappings
#                  *) This option is useful for development and testing but not recommended for
#                   production since it erases all existing data.
#  5. create-drop: crate and drop immediately application shutdown

spring.jpa.hibernate.ddl-auto=update

# dialect is a database-specific SQL variant that Hibernate understands which database
#Each database has own syntax, and configuration and fetures
#by using this detect hibernate Auto-generate the query if is not written spring boot automatically get detect property
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect


